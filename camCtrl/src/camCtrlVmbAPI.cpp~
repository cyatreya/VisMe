//#include <sstream>
#include <iostream>
#include <ostream>
#include <vector>

#include "camCtrlVmbAPI.h"


namespace VisMe{
  namespace CamCtrlVmbAPI{

    /********************************************************************
     * Default constructor for the camera controller 
     */ 
    CamCtrl() : Vimba( AVT::VmbAPI::VimbaSystem::GetInstance() ) 
		//OBS m_Vimba is reference to a Vimba system engine 
		//and must be initialized at the beginning of the constructor.
    {
      Init();
    }

    /********************************************************************
     * Default destructor for the camera controller
     */
    ~CamCtrl()
    {
      if( !m_cameras.empty() ){
	freeCameras();
      }    
      m_Vimba.Shutdown();
    }

    /********************************************************************
     * Do the initialization of the Vimba api engine and populate cameras
     */
    int Init()
    { 
      err = Vimba.Startup();
      if (err != VmbErrorSuccess ){
	std::cerr << "CamCtrl::Init : VIMBA sytem startup failed : "<< err << std::endl;
	return -1;
      }

      err = Vimba.QueryVersion( m_VimbaVersion );
      if (err != VmbErrorSuccess ){
	std::cerr << "CamCtrl::Init : version Query failed: " << err << std::endl;
	return -2;
      }
      std::cout << "Vimba " << m_VimbaVersion.major << "." << m_VimbaVersion.minor << " initialized" << std::endl;

      findCameras();
    }


    /********************************************************************
     *
     */
    void CamCtrlVmbAPI::findCameras()
    {

      //  err = m_Vimba.GetCameras(m_cameras);

      std::cout << "FindCameras Stub" << std::endl;
    }


    /********************************************************************
     *
     */
    void CamCtrl::freeCameras()
    {

    }

  }//namespace CamCtrlVmbAPI
}//namespace VisMe
